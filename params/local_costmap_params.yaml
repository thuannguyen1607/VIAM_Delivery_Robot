# local_costmap:
#    global_frame: map
#    robot_base_frame: base_link
#    update_frequency: 5.0
#    publish_frequency: 2.0
#    static_map: false
#    rolling_window: true
#    always_send_full_costmap: true
#    width: 4.0
#    height: 4.0
#    resolution: 0.01
#    transform_tolerance: 0.5
#    map_type: costmap
#    plugins:
#     - {name: static_layer,            type: "costmap_2d::StaticLayer"}
#     - {name: obstacle_layer,      type: "costmap_2d::VoxelLayer"}
#     - {name: inflation_layer,     type: "costmap_2d::InflationLayer"}

# local_costmap:
     
#     ## Parameters for setting the threshold on obstacle information
#     # obstacle_range <--> Robot will only updates its map with information about obstacle within this value
#     # raytrace_range <--> Robot attempts to clear out space in front of its values' meter away given sensor readings
#     obstacle_range : 2.5
#     raytrace_range : 3.0
#     # footprint describe the outfit of the robot >> assume the center is located at [0, 0]
#     # footprint: [[-0.20, -0.20], [-0.20, 0.20], [0.20, 0.20], [0.20, -0.20]]
#     footprint_padding: 0.01
#     robot_radius: 0.55
#     transform_tolerance: 2.0

#     #set the update frequences (Hz)
#     update_frequency: 5.0

#     # set the publish frequency of the visualization information
#     publish_frequency: 2.0

#     # define what coordinate frames the costmap should run in 
#     global_frame: base_link
    
#     # the coordinate frame in costmap should reference for the base of the robot
#     robot_base_frame: base_link
    
#     # Whether or not the costmap initialize itself based on a map serverd by the map_server
#     static_map: false
 
#     # Whether the costmap will remain centered around the robot as the rovot moves through the world
#     rolling_windows: true

#     # Setting the width, height and resolution of the costmap || (meters) (meters/cell)
#     width: 6.0
#     height: 6.0
#     resolution: 0.1
#     origin_x: -1.5
#     origin_y: -1.5

#     # Constructing the Mulit-Layered Costmap
#     plugins:
#         - {name: sensor_obstacle, type: "costmap_2d::ObstacleLayer"}
#         - {name: inflation, type: "costmap_2d::InflationLayer"}
    
#     # Define each layer here ....
#     sensor_obstacle:
#         # Observation_sources <--> define a list of sensors going to pass infomation to costmap
#         observation_sources: laser_scan_sensor
#         laser_scan_sensor: {sensor_frame: lidar_point_link, data_type: LaserScan, topic: /horizontal_laser_2d, marking: true, clearing: true}
#     inflation:
#         inflation_radius: 0.55
#         cost_scaling_factor: 6.0

local_costmap:
 global_frame: map
 robot_base_frame: base_link
 update_frequency: 10.0
 publish_frequency: 10.0
 rolling_window: true
 obstacle_range : 2.5
 raytrace_range : 3.0
 footprint_padding: 0.01
 robot_radius: 0.2
 transform_tolerance: 0.5
 width: 3.0
 height: 3.0
 origin_x: 0.0
 origin_y: 0.0
 resolution: 0.02

 static_map: false
 rolling_windows: true

 plugins:
   - {name: inflation_layer,     type: "costmap_2d::InflationLayer"}
   - {name: obstacle_layer,      type: "costmap_2d::ObstacleLayer"}

sensor_obstacle:
        # Observation_sources <--> define a list of sensors going to pass infomation to costmap
        observation_sources: scan
        laser_scan_sensor: {sensor_frame: lidar_point_link, data_type: LaserScan, topic: horizontal_laser_2d, marking: true, clearing: false}

inflation_layer:
        inflation_radius: 1.75
        cost_scaling_factor: 2.58